// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  superadmin
  admin
  editor
  viewer
}

enum FileStatus {
  online
  offline
}

enum SyncStatus {
  completed
  I_failed
  in_progress
}

enum ReportType {
  folder_count
  empty_folders
  folder_metadata
  custom
}

enum FileFormat {
  pdf
  excel
}

model User {
  id         Int       @id @default(autoincrement())
  name       String?
  username   String?   @unique
  email      String    @unique
  password   String
  role       UserRole
  createdAt  DateTime  @default(now())
  lastLogin  DateTime?
  active     Boolean   @default(true)
  files      File[]    @relation("UserFiles")
  folders    Folder[]
  reports    Report[]   @relation("UserReports")
  syncLogs   SyncLog[] @relation("UserSyncLogs")
  notifications Notification[]
  profilePicture String?
  notificationPreferences Json? @default("{\"fileUpdates\": true, \"securityAlerts\": true, \"systemUpdates\": false}")
}

model File {
  id             Int         @id @default(autoincrement())
  name           String
  path           String
  type           String
  size           Int
  status         FileStatus
  description    String?
  uploadedAt     DateTime    @default(now())
  lastModifiedAt DateTime    @updatedAt
  uploadedBy     Int?
  user           User?       @relation("UserFiles", fields: [uploadedBy], references: [id])
  folderId       Int?
  folder         Folder?     @relation(fields: [folderId], references: [id])
  localHash      String      @unique
  isDeleted      Boolean     @default(false)
  deletedAt      DateTime?
  deleteAfter    DateTime?

  // These fields will be inherited from the parent folder
  fiscalYearId   Int?
  fiscalYear     FiscalYear? @relation(fields: [fiscalYearId], references: [id])
  sourceId       Int?
  source         Source?     @relation(fields: [sourceId], references: [id])
  grantTypeId    Int?
  grantType      GrantType?  @relation(fields: [grantTypeId], references: [id])
}

model FiscalYear {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  files     File[]
  folders   Folder[]
}

model Source {
  id    Int    @id @default(autoincrement())
  key   String @unique // e.g., "local_municipality"
  name  String         // fallback or admin label
  files File[]
  folders Folder[]
}

model GrantType {
  id    Int    @id @default(autoincrement())
  key   String @unique // e.g., "supplementary_grant"
  name  String         // fallback or admin label
  files File[]
  folders Folder[]
}

model SyncLog {
  id             Int        @id @default(autoincrement())
  startTime      DateTime
  endTime        DateTime?
  status         SyncStatus
  filesProcessed Int
  filesSuccess   Int
  filesFailed    Int
  initiatedBy    Int
  user           User       @relation("UserSyncLogs", fields: [initiatedBy], references: [id])
  notes          String?
}

model Report {
  id          Int        @id @default(autoincrement())
  name        String
  type        ReportType
  parameters  Json
  fileFormat  FileFormat
  downloadUrl String?
  createdAt   DateTime   @default(now())
  createdBy   Int
  user        User       @relation("UserReports", fields: [createdBy], references: [id])

  @@index([createdAt])
}

model Folder {
  id             Int       @id @default(autoincrement())
  name           String
  path           String    // Full path from root
  parentId       Int?
  parent         Folder?   @relation("FolderToFolder", fields: [parentId], references: [id])
  subfolders     Folder[]  @relation("FolderToFolder")
  files          File[]
  createdAt      DateTime  @default(now())
  lastModifiedAt DateTime  @updatedAt
  createdBy      Int?
  user           User?     @relation(fields: [createdBy], references: [id])
  isDeleted      Boolean   @default(false)
  deletedAt      DateTime?
  deleteAfter    DateTime?
  
  // Metadata fields
  grantTypeId    Int?
  grantType      GrantType?  @relation(fields: [grantTypeId], references: [id])
  fiscalYearId   Int?
  fiscalYear     FiscalYear? @relation(fields: [fiscalYearId], references: [id])
  sourceId       Int?
  source         Source?     @relation(fields: [sourceId], references: [id])

  @@unique([name, parentId, isDeleted])
}

model SystemSettings {
  id                String   @id @default(cuid())
  siteName          String   @default("File Management System")
  siteNameNepali    String   @default("फाइल व्यवस्थापन प्रणाली")
  siteLogo          String?
  maintenanceMode   Boolean  @default(false)
  enabledModules    String[] @default(["files", "users", "reports"])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String   // 'file_update', 'security_alert', 'system_update'
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model UploadSection {
  id           Int      @id @default(autoincrement())
  name         String
  key          String   @unique
  translations Json     // Stores translations for different languages
  order        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("upload_sections")
}